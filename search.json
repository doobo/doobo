[{"title":"轻量级股票数据中台","url":"/2024/12/03/stock-analysis/","content":"## 轻量级股票数据中台\n简单易用的数据中台，服务于韭皇的可自控应用，方便二次开发；无复杂数据库依赖，启动即可得，追求至简，方便韭皇部署；外部接口可扩展，与核心功能隔离，可快速切换服务\n\n## 使用场景\n搭建自己的选股平台，分析数据私有化保存，二次开发私有化指标，自定义选股策略；当时编写程序的初衷，是想把自己每次选股的想法记录下来，方便后期盘整；后面慢慢添加各种指标筛选功能；感觉有了个大体框架，加功能越来越简单。\n\n## 设计理念\n为了方便快速开发，尽可能减少相关依赖，简化开发流程，主要服务于个人，不考虑分布式，集群化部署，相当于个人的数据中台；\n接口和页面多集中在一个项目里面，启动即可调试开发，方便再次开发；外部接口剥离，方便不同平台接口兼容，而不改变现有功能。\n\n## 已有功能\n* 股票搜索(简写，名字，代码，地区，行业)\n* 详情页，包括财务数据，曲线图，涨跌，指标\n* 第三方K线图，默认东方财富网，可切换腾讯网\n* 收藏，分析股票，添加分析结果，添加备注信息\n* 用户登陆，添加子账户，管理子账户的相关信息\n* 外部服务可配置，自定义相关参数，启停相关服务\n* 筛选MA，EMA，股价振幅，股价涨跌，每股净资产\n* 筛选总市值，市盈率，股价，上市时间，量比，换手率\n* 筛选财务数据，每股净资产率，资产负债率，股本流通率\n* 曲线筛选，红三兵，绿三兵，平三兵，三连阳等\n* 筛选MACD，KDJ，RSI，SAR，W&R，SAR，CCI指标\n\n## 安装方式\n* [下载该系统，页面中点\"下载zip\"](https://gitcode.com/didton/stock-analysis/overview)\n* [下载解压软件，解压下载的系统，解压密码:123456](https://sfdl.360safe.com/netunion/20140425/360zip_yqlm_168097.exe)\n* [安装系统执行所需的SDK环境，搜索\"JDK 8\",下载安装](https://sfdl.360safe.com/netunion/20140425/360safejisu+168097+n2a27c3f091.exe)\n* 启动系统(安装一次后，以后只需启动即可，无需重复安装）\n* 在浏览器(支持ES6)上进入系统[,如无ES6浏览器，可点击下载ES6浏览器安装](https://sfdl.360safe.com/netunion/20140425/360cse+168097+n2a27c3f091.exe)\n![JDK 8环境下载](https://s2.loli.net/2024/12/02/O2PGU7V9FHgrkw6.png)\n\n## MAC系统\n* [ES6浏览器](https://sfdl.360safe.com/netunion/20140425/360Browser14.5.1032.0_168097.pkg)\n* [安装环境配置](https://sfdl.360safe.com/mac_safe/360Safe_sid+168097.pkg)\n* 在解压目录内执行命令,\"chmod +x mac.start.command\n\n## 相关界面图\n![首页看板](https://s2.loli.net/2024/12/02/UjGHl8BP5rALZOS.png)\n![股票详情页](https://s2.loli.net/2024/12/02/93bFSxKQslpetYD.png)\n![分析策略列表](https://s2.loli.net/2024/12/02/IPNDahZYdEysJz9.png)","tags":["stock"],"categories":["股票"]},{"title":"日常怎样使用GIT","url":"/2023/01/29/16749649732/","content":"## 同分支开发\n个人项目，小项目，基于这种方式使用GIT，也是初入编码时，使用的最对的方式。\n\n## 切换合并法\n基于特定分支切换出新分支，开发好功能，再合并到特定分支去；这种方法，特别适合那种很多人同时开发的大型项目，一个功能一个新的分支，\n也是在工作中用的最多的一种方式。\n\n## 解决冲突\n### 同分支\n同分支，有冲突，如果用工具，如idea，就直接拉取代码，点击有冲突到代码，进行合并即可。\n\n### 切换合并\n每次使用新分支开发功能的，新分支有冲突同上所述；但更多的是合并到其它分支时，有冲突，这个时候，推荐的方法是：\n* 先从要合并去的目的分支，比如master切换一个merge分支\n* 把新功能的分支，合并到新切换的merge分支，解决有冲突的代码\n* 把解决冲突的merge分支，再合并最终想要合并的(master)分支去\n这样在新分支再次补充新代码，就可以直接合并到master分支去，很少会有新到冲突产生。\n\n### 命令行\n``` shell\n# 抓取origin仓库master分支的代码\ngit fetch origin master\n# 将origin仓库master分支的代码与当前分支的代码合并(先fetch再merge)\ngit merge origin/master\n# 将origin仓库master分支的代码与当前分支的代码强制合并\ngit merge origin/master --allow-unrelated-histories\n# 查看合并后的情况（包括冲突文件）\ngit diff\n\n# 解决有冲突的提交\ngit stash           #将本地修改存储起来\ngit stash list      #查看保存的信息\ngit pull            #暂存了本地修改之后，就可以pull了\ngit stash pop stash@{0}        #还原暂存的内容, 最后解决文件中冲突的的部分\n-- Updated upstream 和=====之间的内容就是pull下来的内容，====和stashed changes之间的内容就是本地修改的内容\n```","tags":["GIT"],"categories":["编程"]},{"title":"Angular使用","url":"/2019/05/23/17622004249/","content":"## 初始化环境\n```bash\nnpm install -g @angular/cli     #安装全局命令行\nng new ngapp                    #生成一个新项目\nng serve --open                 #启动服务器，热刷新\nng serve --proxy-config proxy.conf.json --host 0.0.0.0 --disable-host-check --port 4200 --live-reload-port 4201 #详细设置相关参数\nng serve --prod --env=dev --proxy-config proxy.conf.json --host 0.0.0.0 --disable-host-check\n# 这是生产构建\nng build --target=production --environment=prod\nng build --prod --env=prod\nng build --prod\n# 这是开发构建\nng build --target=development --environment=dev\nng build --dev --e=dev\nng build --dev\n```\n\n## 常用开发命令-组件、服务、路由\n```bash\nng generate component heroes        #生成一个heroes组件，CLI 创建了一个新的文件夹 src/app/heroes/\nng generate component hero -it      #取消模板文件,创建内联模块\nng g c --inline-template=true --inline-style=true tab   #创建内联模块\nng generate service hero            #创建一个名叫 hero 的服务\nng generate service hero --module=app   #创建服务,并把服务注入App组件中\n    #把提供商添加到根模块上，以便在任何地方都使用服务的同一个实例\nng generate module app-routing --flat --module=app #创建路由模块 \n    #--flat 把这个文件放进了 src/app 中，而不是单独的目录中\n    #--module=app 告诉 CLI 把它注册到 AppModule 的 imports 数组中\nng generate class hero              #创建一个类\n#参考地址：https://github.com/angular/angular-cli/wiki/generate-component\n#参考地址：https://www.npmjs.com/package/angular-cli-tools?activeTab=readme\n```\n\n## 页面常用指令\n```bash\n{{ hero.name | uppercase }}     #过滤器，转为大写，lowercase小写\n{{nullHero?.name}}              #替换*ngIf检测空，a?.b?.c?.d\n{{$any(hero).marker}}           #{{$any(this).member}},访问组件中未声明过的成员\n(click)=\"onSelect(hero)\"        #事件绑定方式\n<a routerLink=\"/heroes\">H</a>   #路由跳转方式\n    \n[(ngModel)]=\"hero.name\"         #input的数据双向绑定\n    #这两个的简写[ngModel]=\"hero.name\" (ngModelChange)=\"setUppercaseName($event)\"\n    #import { FormsModule } from '@angular/forms';imports: [FormsModule]需要导入对应的包\n[ngClass]=\"currentClasses\"      #绑定类样式 currentClasses = {'special':  this.isSpecial};\n[class.special]=\"isSpecial\"     #单个样式开关\n[ngStyle]=\"currentStyles\"       #绑定style对象{'font-style': this.canSave  ? 'italic' : 'normal'}\n[style.display]=\"isSpecial ? 'block' : 'none'\"  #简单样式\n[style.visibility]=\"isFirstVote?'visible':'hidden'\"\n[innerHTML]=\"aa\"                #插入HTML\t\n\n*ngFor=\"let hero of heroes;let i = index\"       #for循环语句\n[ngSwitch]=\"currentHero.emotion\" --> *ngSwitchCase=\"'happy'\" --> *ngSwitchDefault\n\n#input事件\n(focus)=\"getMatchInfo()\" #聚焦时执行 (blur)=\"getMatchInfo()\" 失焦时执行\n\n#组件内引入内容\n<ng-content select=\"[ion-fixed],ion-fab\"></ng-content>\n#空占位符\n<ng-container></ng-container>\n#模板语法,封装指令,[IF]等\n<ng-template></ng-template>\n```\n\n## Angular常用TS\n```bash\n#import {Input} from '@angular/core';\n@Input() hero: Hero;            #父子组件通信方式，数据双向绑定,可放set方法上  @Input() set name(name: string){}\n@Output('myClick') clicks       #绑定通知事件，并起别名‘myClick’\n@ViewChild(ChildenComponent) child: ChildenComponent;   #子组件实例引用\n@ViewChild(\"child\") child2;     #字符串,指向含有‘#child’的元素\n@ViewChild('childB', {read: ElementRef})    #匹配元素,html元素\n@ViewChild('childB', {read: ViewContainerRef})  #匹配元素,匹配视图容器\n@ViewChild(\"refresher\") divTop: ElementRef;     #获取html元素\n<input #phone placeholder=\"phone number\">       #模板引用变量,(click)=\"callPhone(phone.value)\" === ref-phone\n#heroForm=\"ngForm\" --> <button type=\"submit\" [disabled]=\"!heroForm.form.valid\">Submit</button>\n\n#滚动到指定锚点\n@ViewChild(\"top\",{read: ElementRef}) ticketEle;\nthis.top && this.top.nativeElement.scrollIntoView (true);\n#滚动到选中的tab\nscrollToSelect() {\n    let selected = this.ticketEle.nativeElement.querySelector(\".select\");\n    if(selected) {\n      let ofTop = selected.offsetTop;\n      this.scroll.nativeElement.scrollTo(0,ofTop);\n    }\n}\n\n#克隆页面元素\nelementRef.nativeElement.cloneNode(true)\n#移除元素\nelement.parentNode && element.parentNode.removeChild(element);\n\n#允许自定义元素，icon-content等icon-header\n@NgModule({ schemas: [CUSTOM_ELEMENTS_SCHEMA] })\n\n#事件监听一\nimport {Observable} from \"rxjs\";\nObservable.fromEvent(this.ele.nativeElement, 'scroll').subscribe((event) => {\n  console.log('scroll',32);\n});\n#事件监听二\nimport {Renderer2} from \"@angular/core\";\nthis.renderer.listen(this.ele.nativeElement, 'click', () => {\n  console.log('click',27);\n});\n\n//js阻止事件冒泡\noEvent.cancelBubble = true;\noEvent.stopPropagation();\n\n//js阻止链接默认行为，没有停止冒泡\noEvent.preventDefault(); \n\n#检测数据变化\nimport {ChangeDetectorRef} from '@angular/core';\npublic cdf: ChangeDetectorRef\nthis.cdf.detectChanges();\n\n#angular6补充\nng g pipe service/date --module ../router/bootstrap #以服务所在目录为根目录确定模块\nng g service service/http       #新建服务，可用模块名替代root\n```\n\n## ES6常用语法\n```bash\nheroes => this.heroes = heroes  #只有一个返回语句的函数\n{ name } as Hero                #把Name的值赋给Hero对象的Name属性\n{bbc}                           #把bbc变量变成键值对bbc-value对象\t\narrs.find(item => item === 1)   #数组查找指定条件的值\nheroes.filter(h => h !== hero)  #过滤数组，true时过滤掉,类似删除\noldArray.map(entry => {'abc:' + entry;})    #生成新的数组，可把数组转对象等\n/**\n * 排序，false:倒序,默认从大到小\n * @param {string} prop,{boolean} sc asc/desc\n * @returns {any}\n * this.sortArray('d30WinRatio',false);\n */\nsortArray(prop: string,sc:boolean=true) {\n    const sorted = this.list.sort((a, b) => a[prop] > b[prop] ? 1 : a[prop] === b[prop] ? 0 : -1);\n    if(!sc) sorted.reverse();\n    return sorted;\n}\n\n#对象转数组--{a:1,b:2,c:3}--->[1,2,3]\nlet arr = Object.keys(this.typeData).map(key=> this.typeData[key]);\n\n#对象拷贝增量赋值\nclass C{\n    a;\n    b;\n    getA(){return this.a}\n    getB(){return this.b}\n}\nlet tmp = new C();\nlet obj = {a:6,b:7};\nvar res = Object.assign(tmp,obj,{c:8});//{a:6,b:7,c:8}; res === tmp;\n```\n\n## 打包和优化\n```bash\nng build --prod --bh ./         #指定base href的值编译\nng build –prod –aot             #不压缩编译，生成map文件\nng build --prod --stats-json    #输出包体组成分析文件，生成 stats.json\nng build --prod --build-optimizer   #配合 UglifyJs 能够智能的移除未使用代码\nng eject                        #导出Webpack配置,.angular-cli.json添加\"ejected\": true\n```\n\n## Angular的Rest风格部署\n```bash\n#静态网站，配置Nginx\nlocation / {\n    root   html/dist;\n    try_files $uri $uri/ /index.html =404; #主要是这句\n    index  index.html index.htm;\n}\n\n#动态网站\napp.use(function (req, res) {\n    console.log(req.path);\n    if(req.path.indexOf('/api')>=0){\n        res.send(\"server text\");\n    }else{ //angular启动页\n        res.sendfile('app/index.html');\n    }\n});\n```\n\n## 常用开发技巧\n```bash\n#命令行扩展工具\nnpm install angular-cli-tools -g    #命令行扩展工具\nngt g class [class-name]            #创建类\nngt g c [component-name]            #创建组建\nngt g d [directive-name]            #创建指令\nngt g e [enum-name]                 #创建枚举\nngt g h [name]                      #创建html\nngt g index                         #创建索引\t\t\nngt g i [interface-name]            #创建接口\nngt g m [module-name]               #创建模块\nngt g p [pipe-name]                 #创建管道\nngt g r [route-name]                #创建动态路由\nngt g routing [routing-name]        #创建静态路由\nngt g s [service-name]e]            #创建服务\nngt g style [style-name]            #创建样式\n\n#添加延迟加载路由\nimport { NgModule }  from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ActivityComponent } from './activity.component';\nconst routes: Routes = [\n  { path: '', component: ActivityComponent },\n];\n@NgModule({\n  imports: [ RouterModule.forChild(routes)],\n  exports: [ RouterModule ]\n})\nexport class ActivityRouting{};\n\n/*\n{path: 'activity', loadChildren: './activity/activity.module#ActivityModule'},\n*/\n\n#常用示列\nngt update index --recursive    #更新当前目录和子目录的index索引\n#模版文件安装配置\nngt install config              #在项目跟路径创建配置文件\nngt s ./login-form.module.ts -t:form-module #使用指定文件创建form模版\nngt g m test -t:form-module     #使用刚刚创建的模版去创建test模块\n#ng更新后的命令，可以在当前目录创建对应的模块\nng update @angular/cli\nng g c --inline-template=true --inline-style=true tab   #创建内联tab模块\nng g c tab -its \t\t#上面命令简写\n\n#路由参数获取\n#route:ActivatedRoute 获取路由参数\nroute.snapshot.params['roomStatus']\nroute.queryParams['roomStatus']\nthis.router.navigate(['/activity/puzzles/ranking', {uid: 123, tid: res.model.id}])\nrouterLink=\"/activity/puzzles\"\nthis.router.navigate(['/login'],{ skipLocationChange: true });\t#防止重复跳登陆页面，url不变\nthis.router.navigate(['./ranking'],{replaceUrl:true,relativeTo:this.currentRoute});//Url改变,不添加到历史记录\n\n#监听当前页面路由变化，可以监听到历史回退\nimport {debounceTime, filter, map, mergeMap} from \"rxjs/operators\";\n#第一次加载不会触发--可放入init里面\nthis.subRouter = this.router.events\n  .pipe(filter(event => event instanceof NavigationEnd),map(() => this.route))\n  .pipe(map(route => {\n    while (route.firstChild) route = route.firstChild;\n    return route;\n  }))\n  .pipe(filter(route => route.outlet === 'primary'))\n  .pipe(mergeMap(route => route.params),debounceTime(300))\n  .subscribe((event) =>{\n    if(Number(event.uid) && Number(event.type)){\n      this.uid = +event.uid;\n      this.type = +event.type;\n    }\n  });\n\n#同路由页面替换URL参数，第一个不添加到历史记录，第二个会产生历史记录\nif (!!(window.history && history.pushState)){\n  history.replaceState({uid: this.uid, type: this.type}, '活动排名页', `#/activity/puzzles/ranking;uid=${this.uid};type=${this.type}`);\n}else{\n  //this.router.navigate(['/activity/puzzles/ranking', {uid: this.uid, type: this.type}]);\n  this.router.navigate(['./ranking'],{replaceUrl:true,relativeTo:this.currentRoute});//不添加到历史记录\n}\n\n//rxjs防抖动函数\nimport {Subject} from \"rxjs/Subject\";\nimport {debounceTime, distinctUntilChanged} from 'rxjs/operators';\nchangeStream: Subject<string> = new Subject<string>();\nthis.order = this.order ||\n      this.changeStream\n          .pipe(debounceTime(2000))\n          .pipe(distinctUntilChanged())\n          .subscribe(streetText => {\n              //实际业务处理\n              console.log(38);\n          });\n#调用方式\nthis.changeStream.next(this.list);\n```\n\n## 常用指令写法\n```bash\n#时间格式化\nimport { DatePipe } from '@angular/common';\nprivate datePipe: DatePipe\nthis.datePipe.transform(this.ticketInfo.flyTime, 'yyyy-MM-dd HH:mm')\n\n#ng-container：特别对for循环和if同时使用时，特别有效\n既不是一个Component，也不是一个Directive，只是单纯的一个特殊tag。ng-container可以直接包裹任何元素，包括文本，但本身不会生成元素标签，也不会影响页面样式和布局。包裹的内容，如果不通过其他指令控制，会直接渲染到页面中\n\nhttps://map.baidu.com/?qt=cur&wd=%E6%B7%B1%E5%9C%B3%E5%B8%82  //天气预报接口\nhttps://map.baidu.com/mobile/?qt=loc&x=113.9278992&y=22.543741&pois=1 //地理信息接口\n```\n## IphoneX的样式兼容\n```bash\n@media only screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) {\n    \t.iphoneTop .indexTop,\n\t    .iphoneTop .liveTop,\n\t    .iphoneTop .navBar{ padding-top: 44px;}\n\t    .betBottomBar,.messageFixed{ bottom: 34px;}\n\t    .iphoneTop .fixed_top_bar .title{ margin-top: 44px;}\n\t}\n\n#背景图平铺\n.content-bg{background: url(../images/bg_repeat.jpg) repeat-y;background-size: 100% auto;}\n\n#浏览器自带滚动条隐藏\nhtml::-webkit-scrollBar{display:none;}\n\n#解决输入框自动补全，黄色背景\ninput:-webkit-autofill,\ninput:-webkit-autofill:hover,\ninput:-webkit-autofill:focus,\ninput:-webkit-autofill:active {\n    -webkit-box-shadow: 0 0 0px 1000px #333 inset;\n    transition: background-color 50000s ease-in-out 0s, color 5000s ease-in-out 0s;\n}\n\n#这种可以解决回退后，显示黄色的背景，完美解决\ninput:-webkit-autofill {\n   -webkit-animation: autofill-fix 1s infinite;\n}\n@-webkit-keyframes autofill-fix {\n    from {\n        background-color: transparent\n    }\n    to {\n        background-color: transparent\n    }\n}\n\n#加上spinner类能让p和div等块旋转\n.spinner{\n    -webkit-animation: spin 1s linear 1s 5 alternate;\n    animation: spin 1s linear infinite;\n    display: inline-block;\n}\n@-webkit-keyframes spin {\n    from {\n        -webkit-transform: rotate(0deg);\n    }\n    to {\n        -webkit-transform: rotate(360deg);\n    }\n}\n\n@keyframes spin {\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n}\n\n#rem单位初始化--Ts\ndeclare var window:any;\ninitWinPage(){\n    this.restWinPage(window, window.lib || (window.lib = {}));\n}\n\nprivate restWinPage(N, M) {\n    function L() {\n        let a = I.getBoundingClientRect().width;\n        a / F > 540 && (a = 540 * F);\n        let d = a / 7.5;\n        I.style.fontSize = d + \"px\", D.rem = N.rem = d\n    }\n\n    let K, J = N.document, I = J.documentElement, H = J.querySelector('meta[name=\"viewport\"]'),\n        G = J.querySelector('meta[name=\"flexible\"]'), F = 0, E = 0, D = M.flexible || (M.flexible = {});\n    if (H) {\n        // console.warn(\"将根据已有的meta标签来设置缩放比例\");\n        let C = H.getAttribute(\"content\").match(/initial\\-scale=([\\d\\.]+)/);\n        C && (E = parseFloat(C[1]), F = parseInt(''+1 / E))\n    } else {\n        if (G) {\n            let B = G.getAttribute(\"content\");\n            if (B) {\n                let A = B.match(/initial\\-dpr=([\\d\\.]+)/), z = B.match(/maximum\\-dpr=([\\d\\.]+)/);\n                A && (F = parseFloat(A[1]), E = parseFloat((1 / F).toFixed(2))), z && (F = parseFloat(z[1]), E = parseFloat((1 / F).toFixed(2)))\n            }\n        }\n    }\n    if (!F && !E) {\n        let y = N.navigator.userAgent, x = (!!y.match(/android/gi) && !!y.match(/iphone/gi)),\n            w = x && !!y.match(/OS 9_3/), v = N.devicePixelRatio;\n        F = x ? v >= 3 && (!F || F >= 3) ? 3 : v >= 2 && (!F || F >= 2) ? 2 : 1 : 1, E = 1 / F\n    }\n    if (I.setAttribute(\"data-dpr\", F), !H) {\n        if (H = J.createElement(\"meta\"), H.setAttribute(\"name\", \"viewport\"), H.setAttribute(\"content\", \"initial-scale=\" + E + \", maximum-scale=\" + E + \", minimum-scale=\" + E + \", user-scalable=no\"), I.firstElementChild) {\n            I.firstElementChild.appendChild(H)\n        } else {\n            let u = J.createElement(\"div\");\n            u.appendChild(H), J.write(u.innerHTML)\n        }\n    }\n    N.addEventListener(\"resize\", function () {\n        clearTimeout(K), K = setTimeout(L, 300)\n    }, !1), N.addEventListener(\"pageshow\", function (b) {\n        b.persisted && (clearTimeout(K), K = setTimeout(L, 300))\n    }, !1), \"complete\" === J.readyState ? J.body.style.fontSize = 12 * F + \"px\" : J.addEventListener(\"DOMContentLoaded\", function () {\n        J.body.style.fontSize = 12 * F + \"px\"\n    }, !1), L(), D.dpr = N.dpr = F, D.refreshRem = L, D.rem2px = function (d) {\n        let c:any = parseFloat(d) * this.rem;\n        return \"string\" == typeof d && d.match(/rem$/) && (c += \"px\"), c\n    }, D.px2rem = function (d) {\n        let c:any = parseFloat(d) / this.rem;\n        return \"string\" == typeof d && d.match(/px$/) && (c += \"rem\"), c\n    }\n}\n\n#iframe缩放问题\n-webkit-transform: scaleY(0.7);//Y轴方向，缩放0.6倍\n-webkit-transform-origin: 100% 100%;//缩放在右下角对齐\nmargin-top: -50px;//负值margin从而把其位置摆正确，有时需要放到包在div的外面\nmargin-left: -95px;//如果用scale全部缩放，需要设置这个值\n#缩放示例\n[style.marginTop.px]=\"cartoonHeight*0.2*-1\"\n[style.marginLeft.px]=\"cartoonWidth*0.2*-1\"\nstyle=\"transform: scale(0.8);-webkit-transform: scale(0.8);-webkit-transform-origin: 100% 100%;\"\n```\n\n## SASS常用技巧\n```bash\nnode-sass scss/app.scss css/app.css --output-style compressed\t#编译并压缩代码，-w监听\nnode-sass -w -r scss -o css --output-style compressed \t\t\t#监听scss目录，编译到css目录\n```\n\n## cookie相关设置\n```bash\n#获取根域名，以便设置到根域名上，如 .baidu.com .google.com\nfunction GetCookieDomain() {\n    var host = location.hostname;\n    var ip = /^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$/;\n    if (ip.test(host) === true || host === 'localhost') return host;\n    var regex = /([^]*).*/;\n    var match = host.match(regex);\n    if (typeof match !== \"undefined\" && null !== match) host = match[1];\n    if (typeof host !== \"undefined\" && null !== host) {\n        var strAry = host.split(\".\");\n        if (strAry.length > 1) {\n            host = strAry[strAry.length - 2] + \".\" + strAry[strAry.length - 1];\n        }\n    }\n    return '.' + host;\n}\n\n#设置cookie\ndocument.cookie = cname + \"=\" + cvalue + \"; expires=\" + expires + \"; domain=\" + GetCookieDomain() + \"; path=/\";\n\n#过期，当前时间减去一秒，立即过期\nexpires = (new Date().getTime() - 1000);\ndocument.cookie = \"agentId\" + \"=\" + \"123\" + \"; expires=\" + (new Date().getTime() - 1000) + \"; domain=\" + GetCookieDomain() + \"; path=/\";\n```","tags":["angular"],"categories":["编程"]}]